// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Put you code here:
	ShiftLeft(in = x, out = leftx);
	ShiftLeft(in = y, out = lefty);
	ShiftRight(in = x, out = rightx);
	ShiftRight(in = y, out = righty);
	Mux16(b = leftx, a = rightx, sel = instruction[5],out = sfx, out[0..14] = sx);
	And16(a[15] = x[15], a[0..14] = sx, b[15] = true, b[0..14] = sx , out = sftx);
	Mux16(b = lefty, a = righty, sel = instruction[5],out = sfy, out[0..14] = sy);
	And16(a[15] = y[15], a[0..14] = sy, b[15] = true, b[0..14] = sy, out = sfty);
	Mux16(a = sfty, b = sftx, sel = instruction[4], out = sft, out[0..7] = in1, out[8..15] = in2, out[15] = ng1);
	Or8Way(in = in1, out = or1);
	Or8Way(in =  in2, out = or2);
	Or(a = or1, b= or2, out = z);
	Not(in = z, out = zr1);
	
	
	ALU( x = x, y = y, zx = instruction[5], nx = instruction[4], zy = instruction[3],
		ny = instruction[2], f = instruction[1], no = instruction[0],
		out = rgl, zr = zr2, ng = ng2);
	
	Mux16(a = sft, b = rgl, sel = instruction[8], out = out);
	Mux(a = zr1, b = zr2, sel = instruction[8], out = zr);
	Mux(a = ng1, b = ng2, sel = instruction[8], out = ng);
	
}
