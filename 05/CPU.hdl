// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    // Decided whether to use M or A
    Mux16(a=aOut, b=inM, sel=instruction[12], out=secondInp);
    
    // Call the ALU
    ALU(x=secondInp, y=dOut, zx=instruction[9], 
    		nx=instruction[8], 
		zy=instruction[11],
	       	ny=instruction[10],
	       	f=instruction[7],
	       	no=instruction[6],
		out=loader, out=outM,
		zr=zeroFlag,
		ng=negFlag);

    // Set AMD as required
    Mux16(a=instruction, b=loader, sel=instruction[15], out=loaderA);
    Not(in=instruction[15], out=ninz);
    Or(a=instruction[5], b=ninz, out=loadA);
    ARegister(in=loaderA, load=loadA, out=aOut, out[0..14]=addressM); 
    And(a=instruction[4], b=instruction[15], out=loadD); 
    DRegister(in=loader, load=loadD, out=dOut);
    And(a=instruction[3], b=instruction[15], out=writeM);
    
    // Set PC as required
    And(a=negFlag, b=instruction[2], out=isLess);
    And(a=zeroFlag, b=instruction[1], out=isEq);
    Or(a=isLess, b=isEq, out=sout);
    Not(in=negFlag, out=isGeq);
    Not(in=zeroFlag, out=isDiff);
    And(a=isGeq, b=isDiff, out=isGrtT);
    And(a=isGrtT, b=instruction[0], out=isGrt);
    Or(a=sout, b=isGrt, out=toLoadTmp);
    And(a=toLoadTmp, b=instruction[15], out=toLoadPC);


    PC(in=aOut, load=toLoadPC, inc=true, reset=reset, out[0..14]=pc);

}
