// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int memLength;
    field int length;
    field Array array;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let memLength = maxLength;
        let length = 0;
        let array = Array.new(memLength + 1);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do array.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int new_array;
        var int i;
        let i = 0;
        if (length < memLength){
            let array[length] = c;
        }
        else{
            let new_array = Array.new(length + #length);
            while(i < length){
                let new_array[i] = array[i];
                let i = i + 1;
            }
            let new_array[i] = c;
            do array.dispose();
            let array = new_array;
        }
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0){
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i,d,v;
		var boolean pos;
        let i = 0;
		let pos = true;
		if ((array[0] > 44) & (array[0] < 46)){
			let pos = false;
			let i = i + 1;
		}
        while((array[i] > 47) & (array[i] < 58)){
            let d = array[i] - 48;
            let v = Math.multiply(v, 10) + d;
          /*  do Output.printInt(v);
            do Output.println();*/
            let i = i + 1;
        }
		if (pos){
			return v;
		}
        return -v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int last, i, c;
        let last = Math.abs(val) - Math.multiply(10, Math.divide(Math.abs(val), 10));
        let c = last + 48;
        if (Math.abs(val) < 10){
            let length = 0;
            if (val < 0){
                do appendChar(45);
            }
            do appendChar(c);
        }
        else{
            do setInt(Math.divide(val, 10));
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
