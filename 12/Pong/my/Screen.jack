// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static int screen;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0; // = 512*256 / 32

        while (i < 4096) {  // = 512*256 / 32
            let screen[i] = 0;
            let i = i + 1;
        }
        return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int rel_byte, mask;
        // Row * 32 + Col / 16
        // y * 32 + x / 16
        // y<<5 + x>>4
        let rel_byte = (^^^^^y) + (####x);
        let mask = 1;

        if ((x & 1) = 1) {
            let mask = ^mask;
        }
        let x = #x;
        if ((x & 1) = 1) {
            let mask = ^^mask;
        }
        let x = #x;
        if ((x & 1) = 1) {
            let mask = ^^^^mask;
        }
        let x = #x;
        if ((x & 1) = 1) {
            let mask = ^^^^^^^^mask;
        }

        do Screen.applyMask(rel_byte, mask);
        return;
    }

    // Colors all pixels matching the bits in mask at rel_byte at the current color
    function void applyMask(int rel_byte, int mask) {
        if (~color) {
            let mask = ~mask;
            let screen[rel_byte] = screen[rel_byte] & mask;
            return;
        }
        let screen[rel_byte] = screen[rel_byte] | mask;
        return;
    }

    function int copySign(int target, int sign) {
        if (sign < 0) {
            return -target;
        }
        return target;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, absdy, diff, a, b;

        if (y1 = y2) {
            do Screen.drawStraightY(y1, x1, x2);
            return;
        }

        if (x2 < x1) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        let dx = x2 - x1; // always positive
        let dy = y2 - y1;
        let absdy = Math.abs(dy);
        let diff = 0;
        let a = 0;
        let b = 0;

        while ((~(a > dx)) & (~(b > absdy))) {
            do Screen.drawPixel(x1 + a, y1 + Screen.copySign(b, dy));
            if (~(diff > 0)) {
                let b = b + 1;
                let diff = diff + dx;
            } else {
                let a = a + 1;
                let diff = diff - absdy;
            }
        }
        do Screen.drawPixel(x2, y2);

        return;
    }

    function void drawStraightY(int y, int x1, int x2) {
        var int min, max, start_byte, end_byte, start_mask, end_mask;

        if (x1 = x2) {
            do Screen.drawPixel(x1, y);
            return;
        }

        let min = Math.min(x1, x2);
        let max = Math.max(x1, x2);
        let start_byte = (^^^^^y) + (####min);
        let end_byte = (^^^^^y) + (####max);

        let start_mask = 1;
        if ((min & 1) = 1) {
            let start_mask = ^start_mask;
        }
        let min = #min;
        if ((min & 1) = 1) {
            let start_mask = ^^start_mask;
        }
        let min = #min;
        if ((min & 1) = 1) {
            let start_mask = ^^^^start_mask;
        }
        let min = #min;
        if ((min & 1) = 1) {
            let start_mask = ^^^^ ^^^^start_mask;
        }
        let start_mask = ~(start_mask - 1);

        let end_mask = 1;
        if ((max & 1) = 1) {
            let end_mask = ^end_mask;
        }
        let max = #max;
        if ((max & 1) = 1) {
            let end_mask = ^^end_mask;
        }
        let max = #max;
        if ((max & 1) = 1) {
            let end_mask = ^^^^end_mask;
        }
        let max = #max;
        if ((max & 1) = 1) {
            let end_mask = ^^^^^^^^end_mask;
        }
        let end_mask = (^end_mask - 1);


        if (start_byte = end_byte) {
            let start_mask = start_mask & end_mask;
            do Screen.applyMask(start_byte, start_mask);
            return;
        }


        do Screen.applyMask(start_byte, start_mask);
        do Screen.applyMask(end_byte, end_mask);

        let start_mask = ~0;
        let start_byte = start_byte + 1;
        while (start_byte < end_byte) {
            do Screen.applyMask(start_byte, start_mask);
            let start_byte = start_byte + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int min, max;
        let min = Math.min(y1, y2);
        let max = Math.max(y1, y2);
        while (~(min > max)) {
            do Screen.drawStraightY(min, x1, x2);
            let min = min + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int r_sq, y_cur, x_dist;

        let r_sq = r*r;
        let y_cur = -r;

        while (~(y_cur > r)) {
            let x_dist = Math.sqrt(r_sq - (y_cur*y_cur));
            do Screen.drawStraightY(y + y_cur, x - x_dist, x + x_dist);
            let y_cur = y_cur + 1;
        }

        return;
    }
}
