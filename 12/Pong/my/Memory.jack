// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static int free_list;
    static int memory;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let free_list = 2048;
        let free_list[0] = 32767;
        let free_list[1] = -1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int curr_block, prev_block, ret;

        if (size < 1) {
            do Sys.error(5);
        }

        let curr_block = free_list;
        let prev_block = -1;

        while (true) {

            if (curr_block[0] > size) {

                let ret = curr_block + 1;
                let curr_block[size + 1] = curr_block[0] - size - 1;
                let curr_block[size + 2] = curr_block[1];
                if (~(prev_block = -1)) {
                    let prev_block[1] = curr_block + size + 1;
                } else {
                    let free_list = curr_block + size + 1;
                }
                let ret[-1] = size;
                return ret;
            }

            if (curr_block[1] = -1) {
                do Sys.error(6);
            }
            let prev_block = curr_block;
            let curr_block = curr_block[1];
        }
        return -1;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = free_list;
        let free_list = o - 1;
        return;
    }    
}
